#!/bin/bash
set -e

docker exec -i clickhouse clickhouse-client -n <<-EOSQL

CREATE TABLE default.structured_events
(
    `alert_id` String CODEC(ZSTD(1)),
    `alert_type` String CODEC(ZSTD(1)),
    `timestamp` DateTime64(6) CODEC(Delta(8), ZSTD(1)),
    `severity_text` String CODEC(ZSTD(1)),
    `severity_number` UInt32 CODEC(ZSTD(1)),
    `message` String CODEC(ZSTD(1)),
    `source_ip` String CODEC(ZSTD(1)),
    `source_type` String CODEC(ZSTD(1)),
    `investigative_url` String CODEC(ZSTD(1)),
    `source` String CODEC(ZSTD(1)),
    `site_display` String CODEC(ZSTD(1)),
    `site_name` String CODEC(ZSTD(1)),
    `device_display` String CODEC(ZSTD(1)),
    `device_name` String CODEC(ZSTD(1)),
    `device_serial` String CODEC(ZSTD(1)),
    `four_tuple_display` String CODEC(ZSTD(1)),
    `interface_name` String CODEC(ZSTD(1)),
    `title` String CODEC(ZSTD(1)),
    `resolution` Bool,
    `policy` String CODEC(ZSTD(1)),
    `errors` String CODEC(ZSTD(1)),
    `note` String CODEC(ZSTD(1)),
    `dscp` String CODEC(ZSTD(1)),
    `initial_jitter_avg` Float64,
    `latest_jitter_avg` Float64,
    `initial_average_application_flow_delay` Float64,
    `latest_average_application_flow_delay` Float64,
    `initial_average_network_flow_delay` Float64,
    `latest_average_network_flow_delay` Float64,
    `device_status` String CODEC(ZSTD(1)),
    `previous_device_status` String CODEC(ZSTD(1)),
    `class_names` String CODEC(ZSTD(1)),
    `application_name` String CODEC(ZSTD(1)),
    `interface_capacity` String CODEC(ZSTD(1)),
    `interface_direction` String CODEC(ZSTD(1)),
    `initial_drop_rate` Float64,
    `latest_drop_rate` Float64,
    `initial_utilization` Float64,
    `latest_utilization` Float64,
    `bandwidth` String CODEC(ZSTD(1)),
    `configured_threshold` Float64,
    `interface_tags` String CODEC(ZSTD(1)),
    `device_tags` String CODEC(ZSTD(1)),
    `site_tags` String CODEC(ZSTD(1)),
    `mitre_category` String CODEC(ZSTD(1)),
    `description` String CODEC(ZSTD(1)),
    `level2_topology` String CODEC(ZSTD(1)),
    `level2_applicationsflow` String CODEC(ZSTD(1))
)
ENGINE = MergeTree
PARTITION BY toDate(timestamp)
ORDER BY (message, toUnixTimestamp(timestamp))
TTL toDateTime(timestamp) + toIntervalDay(30)
SETTINGS index_granularity = 8192, ttl_only_drop_parts = 1;

CREATE MATERIALIZED VIEW default.structured_events_view TO default.structured_events
(
    `alert_id` String,
    `alert_type` String,
    `timestamp` DateTime64(9),
    `severity_text` String,
    `severity_number` UInt8,
    `message` String,
    `source_ip` String,
    `source_type` String,
    `investigative_url` String,
    `source` String,
    `site_display` String,
    `site_name` String,
    `device_display` String,
    `device_name` String,
    `device_serial` String,
    `four_tuple_display` String,
    `interface_name` String,
    `title` String,
    `resolution` UInt8,
    `policy` String,
    `errors` String,
    `note` String,
    `dscp` String,
    `initial_jitter_avg` String,
    `latest_jitter_avg` String,
    `initial_average_application_flow_delay` String,
    `latest_average_application_flow_delay` String,
    `initial_average_network_flow_delay` String,
    `latest_average_network_flow_delay` String,
    `device_status` String,
    `previous_device_status` String,
    `class_names` String,
    `application_name` String,
    `interface_capacity` String,
    `interface_direction` String,
    `initial_drop_rate` String,
    `latest_drop_rate` String,
    `initial_utilization` String,
    `latest_utilization` String,
    `bandwidth` String,
    `configured_threshold` String,
    `interface_tags` String,
    `device_tags` String,
    `site_tags` String,
    `mitre_category` String,
    `description` String,
    `level2_topology` String,
    `level2_applicationsflow` String
)
AS SELECT
    LogAttributes['alertId'] AS alert_id,
    min(LogAttributes['alertType']) AS alert_type,
    Timestamp AS timestamp,
    min(SeverityText) AS severity_text,
    min(SeverityNumber) AS severity_number,
    min(Body) AS message,
    min(LogAttributes['host.ip']) AS source_ip,
    min(LogAttributes['host.type']) AS source_type,
    min(LogAttributes['host.login.url']) AS investigative_url,
    min(LogAttributes['log.type']) AS source,
    min(if(mapContains(LogAttributes, 'sinfo.SITE.displayValue'), LogAttributes['sinfo.SITE.displayValue'], '')) AS site_display,
    min(if(mapContains(LogAttributes, 'sinfo.SITE.siteName'), LogAttributes['sinfo.SITE.siteName'], '')) AS site_name,
    min(if(mapContains(LogAttributes, 'sinfo.DEVICE.displayValue'), LogAttributes['sinfo.DEVICE.displayValue'], '')) AS device_display,
    min(if(mapContains(LogAttributes, 'sinfo.DEVICE.deviceName'), LogAttributes['sinfo.DEVICE.deviceName'], '')) AS device_name,
    min(if(mapContains(LogAttributes, 'sinfo.DEVICE.deviceSerial'), LogAttributes['sinfo.DEVICE.deviceSerial'], '')) AS device_serial,
    min(if(mapContains(LogAttributes, 'sinfo.FOUR_TUPLE.displayValue'), LogAttributes['sinfo.FOUR_TUPLE.displayValue'], '')) AS four_tuple_display,
    min(if(mapContains(LogAttributes, 'desc.sinfo.interfaceName'), LogAttributes['desc.sinfo.interfaceName'], '')) AS interface_name,
    min(LogAttributes['title']) AS title,
    min(multiIf((LogAttributes['userStatus']) = 'ACTIVE', 0, (LogAttributes['userStatus']) = 'RESOLVED', 1, 0)) AS resolution,
    min(if(mapContains(LogAttributes, 'Policy'), LogAttributes['Policy'], '')) AS policy,
    min(if(mapContains(LogAttributes, 'Errors'), LogAttributes['Errors'], '')) AS errors,
    min(if(mapContains(LogAttributes, 'Note'), LogAttributes['Note'], '')) AS note,
    min(if(mapContains(LogAttributes, 'DSCP'), LogAttributes['DSCP'], '')) AS dscp,
    min(if(mapContains(LogAttributes, 'Initial Jitter Avg'), if(extract(LogAttributes['Initial Jitter Avg'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Initial Jitter Avg'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS initial_jitter_avg,
    min(if(mapContains(LogAttributes, 'Latest Jitter Avg'), if(extract(LogAttributes['Latest Jitter Avg'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Latest Jitter Avg'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS latest_jitter_avg,
    min(if(mapContains(LogAttributes, 'Initial Average Application Flow Delay'), if(extract(LogAttributes['Initial Average Application Flow Delay'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Initial Average Application Flow Delay'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS initial_average_application_flow_delay,
    min(if(mapContains(LogAttributes, 'Latest Average Application Flow Delay'), if(extract(LogAttributes['Latest Average Application Flow Delay'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Latest Average Application Flow Delay'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS latest_average_application_flow_delay,
    min(if(mapContains(LogAttributes, 'Initial Average Network Flow Delay'), if(extract(LogAttributes['Initial Average Network Flow Delay'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Initial Average Network Flow Delay'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS initial_average_network_flow_delay,
    min(if(mapContains(LogAttributes, 'Latest Average Network Flow Delay'), if(extract(LogAttributes['Latest Average Network Flow Delay'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Latest Average Network Flow Delay'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS latest_average_network_flow_delay,
    min(if(mapContains(LogAttributes, 'Device Status'), LogAttributes['Device Status'], '')) AS device_status,
    min(if(mapContains(LogAttributes, 'Previous Device Status'), LogAttributes['Previous Device Status'], '')) AS previous_device_status,
    min(if(mapContains(LogAttributes, 'Class Names'), LogAttributes['Class Names'], '')) AS class_names,
    min(if(mapContains(LogAttributes, 'Application Name'), LogAttributes['Application Name'], if(mapContains(LogAttributes, 'Application'), LogAttributes['Application'], if(mapContains(LogAttributes, 'application'), LogAttributes['application'], '')))) AS application_name,
    min(if(mapContains(LogAttributes, 'Interface Capacity'), LogAttributes['Interface Capacity'], '')) AS interface_capacity,
    min(if(mapContains(LogAttributes, 'Interface Direction'), LogAttributes['Interface Direction'], '')) AS interface_direction,
    min(if((LogAttributes['alertType']) = 'MEDIA_PACKET_LOSS_PERCENT', extract(LogAttributes['Initial Packet Loss'], '[+-]?[0-9.]+'), if(mapContains(LogAttributes, 'Initial Drop Rate'), if(extract(LogAttributes['Initial Drop Rate'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Initial Drop Rate'], '[+-]?[0-9.]+'), '0.0'), '0.0'))) AS initial_drop_rate,
    min(if((LogAttributes['alertType']) = 'MEDIA_PACKET_LOSS_PERCENT', extract(LogAttributes['Latest Packet Loss'], '[+-]?[0-9.]+'), if(mapContains(LogAttributes, 'Latest Drop Rate'), if(extract(LogAttributes['Latest Drop Rate'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Latest Drop Rate'], '[+-]?[0-9.]+'), '0.0'), '0.0'))) AS latest_drop_rate,
    min(multiIf((LogAttributes['alertType']) = 'DEVICE_CPU', extract(LogAttributes['Initial CPU Percentage'], '[+-]?[0-9.]+'), (LogAttributes['alertType']) = 'DEVICE_MEM', extract(LogAttributes['Initial Memory Percentage'], '[+-]?[0-9.]+'), if(mapContains(LogAttributes, 'Initial Utilization'), if(extract(LogAttributes['Initial Utilization'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Initial Utilization'], '[+-]?[0-9.]+'), '0.0'), '0.0'))) AS initial_utilization,
    min(multiIf((LogAttributes['alertType']) = 'DEVICE_CPU', extract(LogAttributes['Latest CPU Percentage'], '[+-]?[0-9.]+'), (LogAttributes['alertType']) = 'DEVICE_MEM', extract(LogAttributes['Latest Memory Percentage'], '[+-]?[0-9.]+'), if(mapContains(LogAttributes, 'Latest Utilization'), if(extract(LogAttributes['Latest Utilization'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Latest Utilization'], '[+-]?[0-9.]+'), '0.0'), '0.0'))) AS latest_utilization,
    min(if(mapContains(LogAttributes, 'Bandwidth'), LogAttributes['Bandwidth'], '0.0')) AS bandwidth,
    min(if(mapContains(LogAttributes, 'Configured Threshold'), if(extract(LogAttributes['Configured Threshold'], '[+-]?[0-9.]+') != '', extract(LogAttributes['Configured Threshold'], '[+-]?[0-9.]+'), '0.0'), '0.0')) AS configured_threshold,
    min(if(mapContains(LogAttributes, concat('interfaceName.', LogAttributes['desc.sinfo.interfaceName'], '.tagValue')), LogAttributes[concat('interfaceName.', LogAttributes['desc.sinfo.interfaceName'], '.tagValue')], '')) AS interface_tags,
    min(if(mapContains(LogAttributes, concat('deviceSerial.', LogAttributes['sinfo.DEVICE.deviceSerial'], '.tagValue')), LogAttributes[concat('deviceSerial.', LogAttributes['sinfo.DEVICE.deviceSerial'], '.tagValue')], '')) AS device_tags,
    min(if(mapContains(LogAttributes, concat('siteName.', LogAttributes['sinfo.SITE.siteName'], '.tagValue')), LogAttributes[concat('siteName.', LogAttributes['sinfo.SITE.siteName'], '.tagValue')], '')) AS site_tags,
    min(if(mapContains(LogAttributes, 'mitrecategory'), LogAttributes['mitrecategory'], '')) AS mitre_category,
    min(if(mapContains(LogAttributes, 'description'), LogAttributes['description'], '')) AS description,
    min(if(mapContains(LogAttributes, 'LevelTwoInformation_topologypath'), LogAttributes['LevelTwoInformation_topologypath'], if(mapContains(LogAttributes, 'LevelTwoInformation_4tupletopologypath'), LogAttributes['LevelTwoInformation_4tupletopologypath'], ''))) AS level2_topology,
    min(if(mapContains(LogAttributes, 'LevelTwoInformation_topapplicationsflowcsv'), LogAttributes['LevelTwoInformation_topapplicationsflowcsv'], '')) AS level2_applicationsflow
FROM default.otel_logs
WHERE ((LogAttributes['log.type']) = 'npm') AND ((LogAttributes['receiver_type']) = 'livenx')
GROUP BY
    alert_id,
    timestamp;

    
EOSQL